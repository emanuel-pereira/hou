@startuml


actor Administrator

skinparam sequence {
   ArrowColor SteelBlue
   ActorBorderColor Dimgray
   LifeLineBorderColor MidnightBlue
   LifeLineBackgroundColor #A9DCDF

   ParticipantBorderColor Dimgray
   ParticipantBackgroundColor SteelBlue
   ParticipantFontName Calibri Bold
   ParticipantFontSize 17
   ParticipantFontColor Ivory

   ActorBackgroundColor SteelBlue
   ActorFontColor MidnightBlue
   ActorFontSize 17
   ActorFontName Aapex
}

skinparam note {
BorderColor SteelBlue
}

Administrator -> "UI": Edit select room
"UI" -> ":RoomCTRL":  PUT /rooms/{id}\nrequest body with \nupdated room
note right
{ "id": "B106",
  "description": "Classroom",
  "floor": 1,
  "length": 13,
  "width": 7,
  "height": 3.5 }
end note
create ":RoomService"
":RoomCTRL" -> ":RoomService": create()
create "rDTO:RoomDetailDTO"
":RoomCTRL" -> "rDTO:RoomDetailDTO": create()
":RoomCTRL" -> ":RoomService": true=checkIfIDExists(id)
":RoomService" -> RoomRepository: true=existsById(id)
":RoomCTRL" -> ":RoomService": true=editRoom(id, rDTO)
":RoomService" -> ":RoomService": editRDTO=findById(id)
":RoomService" -> RoomRepository: editR=findById(id)
":RoomService" -> RoomMapper: editRDTO=toDetailDto(editR)
create "editRDTO:RoomDetailDTO"
RoomMapper -> "editRDTO:RoomDetailDTO": create()
":RoomService" -> "rDTO:RoomDetailDTO": newValue=get{attribute}
":RoomService"  -> "editRDTO:RoomDetailDTO": set{attribute}(newValue)

note left
{attribute} is:
description,
floor, length,
width and height
    end note
":RoomService" -> ":RoomService": save(editRDTO)
":RoomService" -> RoomMapper: room=toObject(editRDTO)
":RoomService" -> RoomRepository: save(room)
create ResponseEntity
":RoomCTRL" -> ResponseEntity: responseEntity = new ResponseEntity<>(editRDTO, HttpStatus.OK);

"UI" <-- ":RoomCTRL": responseEntity
Administrator <-- "UI": Room content is updated

@enduml