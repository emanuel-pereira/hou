@startuml
autonumber
hidefootbox
actor PowerUser

activate PowerUser
PowerUser -> ":EnergyConsumptionInPeriodUI": Get Total Metered\nEnergy Consumption
activate  ":EnergyConsumptionInPeriodUI"
PowerUser <-- ":EnergyConsumptionInPeriodUI": Shows List Of Metered
PowerUser -> ":EnergyConsumptionInPeriodUI": Chooses a metered (device, room or grid)
PowerUser <-- ":EnergyConsumptionInPeriodUI": Ask for the time interval
PowerUser -> ":EnergyConsumptionInPeriodUI": Input the time interval
":EnergyConsumptionInPeriodUI" -> ":EnergyConsumptionInPeriodCTRL": tMe=getEnergyConsumption\nInPeriod(index, start, end)
":EnergyConsumptionInPeriodCTRL" -> ":{class}Metered": create(): tMe=getEnergyConsumption\nInPeriod(index, start, end)
note right
	{class} can be:
	 HouseGrid - loops all rooms
	 and then all metered devices
	 Room - loops all devices
	 Device
end note
activate ":{class}Metered"
 ":{class}Metered" -> ":Device": tMe = getEnergyConsumption\nInPeriod(start, end)
activate ":Device"
":Device" -> ":ReadConfigFile": i:getDevicesMeteringPeriod()
activate ":ReadConfigFile"
deactivate ":ReadConfigFile"
":Device" -> ":ReadingList": tMe=getValueOfReadings\nInTimeInterval(start, end)
activate ":ReadingList"
":ReadingList" -> ":Reading": v=returnValueOfReading
activate ":Reading"
deactivate ":Reading"
deactivate ":ReadingList"
deactivate ":Device"
deactivate ":{class}Metered"
PowerUser <-- ":EnergyConsumptionInPeriodUI": Shows Total Metered Energy\nConsumption
deactivate ":EnergyConsumptionInPeriodCTRL"
deactivate ":EnergyConsumptionInPeriodUI"


@enduml
