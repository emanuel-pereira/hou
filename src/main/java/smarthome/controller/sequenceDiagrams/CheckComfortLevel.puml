@startuml

skinparam sequence {
         	ArrowColor SteelBlue
         	ActorBorderColor Dimgray
         	LifeLineBorderColor MidnightBlue
         	LifeLineBackgroundColor #A9DCDF

         	ParticipantBorderColor Dimgray
         	ParticipantBackgroundColor SteelBlue
         	ParticipantFontName Calibri Bold
         	ParticipantFontSize 17
         	ParticipantFontColor Ivory

         	ActorBackgroundColor SteelBlue
         	ActorFontColor MidnightBlue
         	ActorFontSize 17
         	ActorFontName Aapex

         }
skinparam note {
BorderColor SteelBlue
}
autonumber
hidefootbox
actor Administrator


Administrator -> ":ComfortLevelUI": Check comfort level in a room
create ":ComfortLevelCTRL"

":ComfortLevelUI" -->> ":ComfortLevelCTRL": create()

create ":ComfortLevelService"
":ComfortLevelCTRL" -->> ":ComfortLevelService": create()

":ComfortLevelCTRL" -> ":ComfortLevelService": checkIfGATemperatureSensorExists()
":ComfortLevelService" -> ":House": getHouseGA()
":ComfortLevelService" -> ":GeographicalArea": getSensorList()
":ComfortLevelService" -> ":ComfortLevelService": checkIfTemperatureSensorExistsInGA()


":ComfortLevelCTRL" -> ":ComfortLevelService": getListOfRoomsWithTemperatureSensors()
":ComfortLevelService" -> ":House": getRoomList()

loop for each room in roomList
":ComfortLevelService" -> ":RoomList": getListOfRoomsWithTemperatureSensors()
end


":ComfortLevelUI" -->> Administrator: show filtered room list
Administrator -> ":ComfortLevelUI": select room
":ComfortLevelUI" -> ":ComfortLevelCTRL": getRoomByID(index)
":ComfortLevelCTRL" -->> ":ComfortLevelService": getRoomByID(index)
":ComfortLevelService" -> ":RoomList": r = getRoomByID(index)
":ComfortLevelService" -> "r:Room": roomSensor = getSensorByType(temperature)
Administrator -> ":ComfortLevelUI": Input time interval
":ComfortLevelUI" -> ":ComfortLevelCTRL": getReadingsByInterval(startDate,endDate)
":ComfortLevelCTRL" -->> ":ComfortLevelService": getReadingsByInterval(startDate,endDate)

":ComfortLevelService" -> "geoAreaSensor:Sensor": rL = getReadings(startDate,endDate)


Administrator -> ":ComfortLevelUI": Select a comfort level category
Administrator -> ":ComfortLevelUI": Select comparison with max or min temperature

":ComfortLevelUI" -> ":ComfortLevelCTRL": getComfortLevel(categoryIndex)
":ComfortLevelCTRL" -> ":ComfortLevelService": getReadingsOutsideComfortLevel

loop for each day in time interval
":ComfortLevelService" -> "roomSensor:Sensor": rL = getReadingsInSpecificDay(day)
":ComfortLevelService" -> "rL:ReadingList":  outAverage = dailyAverageOfReadings(day)
":ComfortLevelService" -> "r:Room": maxOrMinTemp = getTemperatureForComfortLevel(outAverage,category)
":ComfortLevelService" -> "r:Room": getReadingsAboveComfortLevel(rL,maxOrMinTemp)

end

":ComfortLevelUI" -->> Administrator: show results







@enduml